{"name":"Ravi Programming Language","tagline":"Ravi Programming Language is a derivative of Lua 5.3 with limited optional static typing and LLVM based JIT compiler","body":"### Overview\r\nRavi is a derivative/dialect of [Lua 5.3](http://www.lua.org/) with limited optional static typing and an [LLVM](http://www.llvm.org/) based JIT compiler. The name Ravi comes from the Sanskrit word for the Sun.\r\n\r\nLua is perfect as a small embeddable dynamic language so why a derivative? Ravi extends Lua with static typing for greater performance under JIT compilation. However, the static typing is optional and therefore Lua programs are also valid Ravi programs.\r\n\r\nThere are other attempts to add static typing to Lua (e.g. [Typed Lua](https://github.com/andremm/typedlua) but these efforts are mostly about adding static type checks in the language while leaving the VM unmodified. So the static typing is to aid programming in the large - the code is eventually translated to standard Lua and executed in the unmodified Lua VM.\r\n\r\nMy motivation is somewhat different - I want to enhance the VM to support more efficient operations when types are known. Type information can be exploited by JIT compilation technology to improve performance.\r\n\r\n### Links\r\n\r\n* [Documentation](http://the-ravi-programming-language.readthedocs.org/en/latest/)\r\n* [Performance Benchmarks](http://the-ravi-programming-language.readthedocs.org/en/latest/ravi-benchmarks.html)\r\n* [LLVM JIT Status](http://the-ravi-programming-language.readthedocs.org/en/latest/ravi-jit-status.html)\r\n* [Binaries](https://github.com/dibyendumajumdar/ravi/releases)\r\n* [GitHub Project Site](https://github.com/dibyendumajumdar/ravi)","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}